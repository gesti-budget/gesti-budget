# === Validation : ce fichier doit √™tre appel√© depuis le CMakeLists.txt racine ===
#
# Ce bloc v√©rifie que le `CMakeLists.txt` actuel (dans src/) est bien inclus via
# un `add_subdirectory(src)` depuis le script principal.
# Si ce n‚Äôest pas le cas (c'est-√†-dire ex√©cut√© directement), on affiche une erreur bloquante.

get_directory_property(m_hasParent PARENT_DIRECTORY)
if(NOT m_hasParent)
    message(FATAL_ERROR "Ce fichier doit √™tre utilis√© via le script CMake principal (top-level CMakeLists.txt) !")
endif()
unset(m_hasParent)

# === Inclusion du module pour v√©rifier la compatibilit√© des options du compilateur C++ ===
include(CheckCXXCompilerFlag)

# === üîî Configuration des options de compilation (warnings, charset, plateformes) ===

# --- ‚ö†Ô∏è Niveaux d‚Äôavertissements activ√©s selon le compilateur ---
if(MSVC)
    # ü™ü Sous Windows avec Visual Studio :
    # Supprime tous les anciens flags /W0 √† /W4 de la cha√Æne de compilation
    string(REGEX REPLACE "(^| )[/-](w|W[0-4])( |$)" " " CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "(^| )[/-](w|W[0-4])( |$)" " " CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    
    # Force le niveau d'avertissement maximal raisonnable (/W4)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W4")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")

else()
    # üêß Sous Linux/macOS (GCC / Clang) : v√©rifie la compatibilit√© des flags avant de les activer

    # Teste si le compilateur supporte les options ci-dessous
    check_cxx_compiler_flag(-Wduplicated-cond Wduplicated-cond)
    check_cxx_compiler_flag(-Wduplicated-branches Wduplicated-branches)
    check_cxx_compiler_flag(-Wnull-dereference Wnull-dereference)
    check_cxx_compiler_flag(-Wlogical-op Wlogical-op)

    # Active les warnings valides + options standards
    add_compile_options(
        -Wall                         # tous les avertissements de base
        -Wextra                       # avertissements suppl√©mentaires
        -Wno-unknown-pragmas          # ne pas signaler les pragmas non reconnus
        -Wformat=2                    # v√©rification stricte des formats printf/scanf
        $<$<BOOL:${Wduplicated-cond}>:-Wduplicated-cond>        # Active l'avertissement sur les conditions dupliqu√©es (if/else avec la m√™me condition) 
                                                                # mais uniquement si la variable CMake Wduplicated-cond est vraie 
                                                                # (cette variable est d√©finie plus haut par check_cxx_compiler_flag).

        $<$<BOOL:${Wduplicated-branches}>:-Wduplicated-branches> # Avertissement si deux branches (if/else) contiennent exactement le m√™me code.
                                                                 # Ajout√© seulement si le compilateur le supporte.

        $<$<BOOL:${Wnull-dereference}>:-Wnull-dereference>     # Avertissement sur les d√©r√©f√©rencements nuls d√©tect√©s √† la compilation.
                                                                # Inclus uniquement si l‚Äôoption est reconnue.

        $<$<BOOL:${Wlogical-op}>:-Wlogical-op>                 # Avertissement sur les erreurs logiques courantes (ex: && au lieu de ||, 
                                                              # ou tests toujours vrais/faux). Activ√© seulement si disponible.

    )

    # Si compilateur r√©cent (GCC >= 6), on ajoute des v√©rifications plus strictes
    if(NOT (CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6))
        check_cxx_compiler_flag(-Wuseless-cast Wuseless-cast)
        add_compile_options(
            -Werror=old-style-cast               # les vieux cast sont des erreurs
            $<$<BOOL:${Wuseless-cast}>:-Werror=useless-cast> # m√™me chose pour cast inutiles
        )
    endif()
endif()

# --- üåê Gestion de l'encodage des sources sous Visual Studio ---
if(MSVC)
    # Teste si le flag /utf-8 est support√© (Visual Studio 2015+)
    check_cxx_compiler_flag(/utf-8 MSVC_UFT8_CXX_FLAG)
    if(MSVC_UFT8_CXX_FLAG)
        # üåê Active l'encodage UTF-8 pour les sources
        add_compile_options(/utf-8)
    else()
        # ü©π Pour les anciens MSVC, injecte un pragma via un header forc√©
        file(GENERATE
            OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/msvc_build_header_$<CONFIG>.h
            CONTENT "#pragma execution_character_set(\"utf-8\")"
        )
        add_compile_options(/FI"${CMAKE_CURRENT_BINARY_DIR}/msvc_build_header_$<CONFIG>.h")
    endif()
endif()

# --- üî¢ Injection des informations de version dans le code source ---
# G√©n√®re le fichier versions.h √† partir du template versions.h.in
configure_file(versions.h.in versions.h @ONLY)
# Ajoute le dossier courant √† l‚Äôinclude path pour pouvoir inclure versions.h
include_directories("${CMAKE_CURRENT_BINARY_DIR}")

# --- ‚öôÔ∏è Fichier sp√©cifique √† la plateforme (plateforme-dependant) ---
# Utilis√© pour abstraire les diff√©rences de comportement selon OS

if(APPLE)
    set(GBEX_PLATFDEP mac.mm)   # Objective-C++ source sp√©cifique macOS

elseif(UNIX)
    set(GBEX_PLATFDEP unix.cpp) # Code sp√©cifique Linux/Unix

elseif(WIN32)
    set(GBEX_PLATFDEP win.cpp)  # Code sp√©cifique Windows

    # G√©n√®re le fichier de ressources .rc pour Windows (ic√¥ne, version, etc.)
    configure_file(
        "${PROJECT_SOURCE_DIR}/resources/gbex.rc.in"
        gbex.rc @ONLY)
    set(GBEX_RC "${CMAKE_CURRENT_BINARY_DIR}/gbex.rc")
endif()

# Ajoutez une source √† l'ex√©cutable de ce projet.
#add_executable (${GBEX_EXE} main.cpp main. "winmain.cpp"h)
add_executable (${GBEX_EXE} WIN32
    winmain.cpp 
    winmain.h
    "${GBEX_RC}")

# === ‚ö†Ô∏è V√©rifie la version minimale de Visual Studio ===
#
# MSVC_VERSION < 1800 = Visual Studio 2012 ou ant√©rieur ‚Üí incompatible
# C++11 est requis dans ce projet, donc VS2013 (v1800) est la base minimale.

if(MSVC AND MSVC_VERSION LESS 1800)
    message(SEND_ERROR "MSVC version too old. Please use VS2013 (12.0) or later for required C++11 features.")
endif()

# === üì¶ D√©tection automatique du support C++11 avec target_compile_features ===
#
# CMake ‚â•3.1 permet de d√©tecter les fonctionnalit√©s standard C++ support√©es par le compilateur
# et de les appliquer proprement √† une cible.

if(";${CMAKE_CXX_COMPILE_FEATURES};" MATCHES ";cxx_std_11;")
    # Si le compilateur supporte officiellement C++11, on l‚Äôactive sur la cible
    target_compile_features(${GBEX_EXE} PUBLIC cxx_std_11)

elseif(
    ";${CMAKE_CXX_COMPILE_FEATURES};" MATCHES ";cxx_range_for;"
    AND ";${CMAKE_CXX_COMPILE_FEATURES};" MATCHES ";cxx_nullptr;"
    AND ";${CMAKE_CXX_COMPILE_FEATURES};" MATCHES ";cxx_variadic_templates;"
)
    # Fallback : le compilateur ne supporte pas `cxx_std_11` officiellement,
    # mais supporte les 3 features cl√©s de C++11 (suffisant pour MMEX)
    target_compile_features(${GBEX_EXE} PUBLIC
        cxx_range_for cxx_nullptr cxx_variadic_templates)

else()
    # === üõ†Ô∏è D√©tection manuelle du support C++11 via des flags de compilation ===
    #
    # Pour les anciens CMake/compilateurs qui ne g√®rent pas `target_compile_features`
    # On teste les drapeaux manuellement (gnu++11, c++11, gnu++0x, etc.)
    CHECK_CXX_COMPILER_FLAG("-std=gnu++11" COMPILER_SUPPORTS_GXX11)
    CHECK_CXX_COMPILER_FLAG("-std=c++11"   COMPILER_SUPPORTS_CXX11)
    CHECK_CXX_COMPILER_FLAG("-std=gnu++0x" COMPILER_SUPPORTS_GXX0X)
    CHECK_CXX_COMPILER_FLAG("-std=c++0x"   COMPILER_SUPPORTS_CXX0X)

    # Applique le premier flag trouv√© parmi les options test√©es
    if(COMPILER_SUPPORTS_GXX11)
        target_compile_options(${MMEX_EXE} PUBLIC -std=gnu++11)
    elseif(COMPILER_SUPPORTS_CXX11)
        target_compile_options(${MMEX_EXE} PUBLIC -std=c++11)
    elseif(COMPILER_SUPPORTS_GXX0X)
        target_compile_options(${MMEX_EXE} PUBLIC -std=gnu++0x)
    elseif(COMPILER_SUPPORTS_CXX0X)
        target_compile_options(${MMEX_EXE} PUBLIC -std=c++0x)
    else()
        # Aucun support C++11 trouv√© ‚Üí on stoppe avec une erreur
        message(SEND_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support.")
    endif()
endif()

# === üîó Chemins d‚Äôinclusion pour les headers de MMEX ===
#
# Ajoute les dossiers courants, model/ et db/ √† la recherche des includes
#target_include_directories(${GBEX_EXE} PUBLIC . model db)
target_include_directories(${GBEX_EXE} PUBLIC . )

# === üîó D√©pendances √† l‚Äô√©dition de lien ===
#
# Cette ligne relie le binaire principal √† toutes les biblioth√®ques n√©cessaires

target_link_libraries(${GBEX_EXE} PUBLIC
    wxSQLite3         # Wrapper wxWidgets pour SQLite
    #RapidJSON         # Librairie JSON rapide en header-only
    #HTML-template     # Syst√®me de template HTML de MMEX
    #CURL::libcurl     # Librairie cURL pour HTTP, FTP, etc.
    #fmt               # Librairie de formatage moderne (comme Python f"")
    #LuaGlue           # Binding entre C++ et Lua
    #Lua               # Interpr√©teur Lua pur (liblua)
)

# === üîß Fix sp√©cifique √† MSVC (Windows) ===
#
# Permet de r√©duire les conflits entre winsock.h et winsock2.h
# et d‚Äôall√©ger l‚Äôinclusion des headers Windows (WIN32_LEAN_AND_MEAN)
if(MSVC)
    target_compile_definitions(${GBEX_EXE} PRIVATE WIN32_LEAN_AND_MEAN)
endif()

# === üì¶ Installation du binaire g√©n√©r√© ===
#
# D√©finit ce qui est install√© avec `make install` ou `cmake --install`
# - RUNTIME : pour Windows/Linux ‚Üí l'ex√©cutable
# - BUNDLE  : pour macOS (.app)

install(TARGETS ${GBEX_EXE}
    RUNTIME DESTINATION ${GBEX_BIN_DIR}
    BUNDLE  DESTINATION .
)
