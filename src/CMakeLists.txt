# === Validation : ce fichier doit √™tre appel√© depuis le CMakeLists.txt racine ===
#
# Ce bloc v√©rifie que le `CMakeLists.txt` actuel (dans src/) est bien inclus via
# un `add_subdirectory(src)` depuis le script principal.
# Si ce n‚Äôest pas le cas (c'est-√†-dire ex√©cut√© directement), on affiche une erreur bloquante.

get_directory_property(m_hasParent PARENT_DIRECTORY)
if(NOT m_hasParent)
    message(FATAL_ERROR "Ce fichier doit √™tre utilis√© via le script CMake principal (top-level CMakeLists.txt) !")
endif()
unset(m_hasParent)

# === Inclusion du module pour v√©rifier la compatibilit√© des options du compilateur C++ ===
include(CheckCXXCompilerFlag)

# === üîî Configuration des options de compilation (warnings, charset, plateformes) ===

# --- ‚ö†Ô∏è Niveaux d‚Äôavertissements activ√©s selon le compilateur ---
if(MSVC)
    # ü™ü Sous Windows avec Visual Studio :
    # Supprime tous les anciens flags /W0 √† /W4 de la cha√Æne de compilation
    string(REGEX REPLACE "(^| )[/-](w|W[0-4])( |$)" " " CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "(^| )[/-](w|W[0-4])( |$)" " " CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    
    # Force le niveau d'avertissement maximal raisonnable (/W4)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W4")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")

else()
    # üêß Sous Linux/macOS (GCC / Clang) : v√©rifie la compatibilit√© des flags avant de les activer

    # Teste si le compilateur supporte les options ci-dessous
    check_cxx_compiler_flag(-Wduplicated-cond Wduplicated-cond)
    check_cxx_compiler_flag(-Wduplicated-branches Wduplicated-branches)
    check_cxx_compiler_flag(-Wnull-dereference Wnull-dereference)
    check_cxx_compiler_flag(-Wlogical-op Wlogical-op)

    # Active les warnings valides + options standards
    add_compile_options(
        -Wall                         # tous les avertissements de base
        -Wextra                       # avertissements suppl√©mentaires
        -Wno-unknown-pragmas          # ne pas signaler les pragmas non reconnus
        -Wformat=2                    # v√©rification stricte des formats printf/scanf
        $<$<BOOL:${Wduplicated-cond}>:-Wduplicated-cond>        # Active l'avertissement sur les conditions dupliqu√©es (if/else avec la m√™me condition) 
                                                                # mais uniquement si la variable CMake Wduplicated-cond est vraie 
                                                                # (cette variable est d√©finie plus haut par check_cxx_compiler_flag).

        $<$<BOOL:${Wduplicated-branches}>:-Wduplicated-branches> # Avertissement si deux branches (if/else) contiennent exactement le m√™me code.
                                                                 # Ajout√© seulement si le compilateur le supporte.

        $<$<BOOL:${Wnull-dereference}>:-Wnull-dereference>     # Avertissement sur les d√©r√©f√©rencements nuls d√©tect√©s √† la compilation.
                                                                # Inclus uniquement si l‚Äôoption est reconnue.

        $<$<BOOL:${Wlogical-op}>:-Wlogical-op>                 # Avertissement sur les erreurs logiques courantes (ex: && au lieu de ||, 
                                                              # ou tests toujours vrais/faux). Activ√© seulement si disponible.

    )

    # Si compilateur r√©cent (GCC >= 6), on ajoute des v√©rifications plus strictes
    if(NOT (CMAKE_COMPILER_IS_GNUCXX AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6))
        check_cxx_compiler_flag(-Wuseless-cast Wuseless-cast)
        add_compile_options(
            -Werror=old-style-cast               # les vieux cast sont des erreurs
            $<$<BOOL:${Wuseless-cast}>:-Werror=useless-cast> # m√™me chose pour cast inutiles
        )
    endif()
endif()

# --- üåê Gestion de l'encodage des sources sous Visual Studio ---
if(MSVC)
    # Teste si le flag /utf-8 est support√© (Visual Studio 2015+)
    check_cxx_compiler_flag(/utf-8 MSVC_UFT8_CXX_FLAG)
    if(MSVC_UFT8_CXX_FLAG)
        # üåê Active l'encodage UTF-8 pour les sources
        add_compile_options(/utf-8)
    else()
        # ü©π Pour les anciens MSVC, injecte un pragma via un header forc√©
        file(GENERATE
            OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/msvc_build_header_$<CONFIG>.h
            CONTENT "#pragma execution_character_set(\"utf-8\")"
        )
        add_compile_options(/FI"${CMAKE_CURRENT_BINARY_DIR}/msvc_build_header_$<CONFIG>.h")
    endif()
endif()

# --- üî¢ Injection des informations de version dans le code source ---
# G√©n√®re le fichier versions.h √† partir du template versions.h.in
configure_file(versions.h.in versions.h @ONLY)
# Ajoute le dossier courant √† l‚Äôinclude path pour pouvoir inclure versions.h
include_directories("${CMAKE_CURRENT_BINARY_DIR}")

# --- ‚öôÔ∏è Fichier sp√©cifique √† la plateforme (plateforme-dependant) ---
# Utilis√© pour abstraire les diff√©rences de comportement selon OS

if(APPLE)
    set(GBEX_PLATFDEP mac.mm)   # Objective-C++ source sp√©cifique macOS

elseif(UNIX)
    set(GBEX_PLATFDEP unix.cpp) # Code sp√©cifique Linux/Unix

elseif(WIN32)
    set(GBEX_PLATFDEP win.cpp)  # Code sp√©cifique Windows

    # G√©n√®re le fichier de ressources .rc pour Windows (ic√¥ne, version, etc.)
    configure_file(
        "${PROJECT_SOURCE_DIR}/resources/gbex.rc.in"
        gbex.rc @ONLY)
    set(GBEX_RC "${CMAKE_CURRENT_BINARY_DIR}/gbex.rc")
endif()

# Ajoutez une source √† l'ex√©cutable de ce projet.
#add_executable (${GBEX_EXE} main.cpp main. "winmain.cpp"h)
add_executable (${GBEX_EXE} WIN32
    winmain.cpp 
    winmain.h
    "${GBEX_RC}")
