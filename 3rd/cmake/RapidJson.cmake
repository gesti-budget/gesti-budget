# üìå En r√©sum√©
# Objectif : S‚Äôassurer que RapidJSON est disponible pour le projet.
# 
# M√©thode :
# 
# Essaye d‚Äôabord avec le mode CONFIG (qui recherche un RapidJSONConfig.cmake).
# 
# Si √©chec, essaye la m√©thode classique (FindRapidJSON.cmake).
# 
# Si toujours √©chec, pointe vers une copie locale dans rapidjson/include.
# 
# R√©sultat :
# 
# Cr√©e une cible RapidJSON que les autres parties du projet peuvent 
# lier avec target_link_libraries(...).
#
# Ajoute les bons include paths en tant que headers syst√®me 
# pour √©viter les avertissements de compilation dans ce code tiers.


# Recherche la biblioth√®que RapidJSON version ‚â• 1.1 via une configuration CMake (CONFIG)
find_package(RapidJSON 1.1 QUIET CONFIG)

# Si non trouv√©e avec CONFIG, tente la recherche classique (FindRapidJSON.cmake ou modules standards)
if(NOT RapidJSON_FOUND)
    find_package(RapidJSON 1.1 QUIET)
endif()

# Si toujours introuvable, on d√©finit manuellement le chemin vers une version embarqu√©e du projet
if(NOT RapidJSON_FOUND)
    set(RAPIDJSON_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/rapidjson/include")
endif()

# Affiche dans la sortie CMake le chemin trouv√©/utilis√©
message(STATUS "Found RapidJSON: ${RAPIDJSON_INCLUDE_DIRS}")

# Cr√©e une biblioth√®que INTERFACE pour RapidJSON (pas de compilation, juste une collection de propri√©t√©s)
add_library(RapidJSON INTERFACE)

# Ajoute les r√©pertoires d'inclusion √† cette cible
# SYSTEM ‚Üí les inclut comme "system headers" pour √©viter les warnings
# BUILD_INTERFACE ‚Üí ne les ajoute que lors de la compilation dans ce projet (pas pour les install√©s ailleurs)
target_include_directories(RapidJSON SYSTEM INTERFACE
    $<BUILD_INTERFACE:${RAPIDJSON_INCLUDE_DIRS}>)
