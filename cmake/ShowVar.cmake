# --------- Print summary after configuration stage ---------
message(STATUS "")
message(STATUS "Information configuration GBEX")
message(STATUS "==========================")
message(STATUS "Version        : ${GBEX_VERSION_FULL}")
if(GIT_COMMIT_HASH)
    message(STATUS "Commit         : ${GIT_COMMIT_HASH} (${GIT_COMMIT_DATE})")
endif()
if(GIT_BRANCH)
    message(STATUS "Branch         : ${GIT_BRANCH}")
endif()
message(STATUS "Host system    : ${CMAKE_HOST_SYSTEM_NAME} ${CMAKE_HOST_SYSTEM_PROCESSOR}")
if(APPLE AND CMAKE_OSX_DEPLOYMENT_TARGET)
    message(STATUS "Target system  : ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR} >= ${CMAKE_OSX_DEPLOYMENT_TARGET}")
else()
    message(STATUS "Target system  : ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_PROCESSOR}")
endif()
if(CMAKE_BUILD_TYPE)
    message(STATUS "Build types    : ${CMAKE_BUILD_TYPE}")
else()
    message(STATUS "Build types    : ${CMAKE_CONFIGURATION_TYPES}")
endif()
message(STATUS "Generator      : ${CMAKE_GENERATOR}")
if(MSVC)
    if(CMAKE_VS_PLATFORM_TOOLSET)
        message(STATUS "Toolset        : ${CMAKE_VS_PLATFORM_TOOLSET}")
        if(CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE)
            message(STATUS "Toolset host   : ${CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE}")
        endif()
    endif()
    if(CMAKE_VS_PLATFORM_NAME)
        message(STATUS "Platform       : ${CMAKE_VS_PLATFORM_NAME}")
    endif()
    message(STATUS "VC install dir : $ENV{VCINSTALLDIR}")
    if(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS)
        foreach(m_dll ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS})
            get_filename_component(m_dll ${m_dll} NAME_WE)
            set(m_dlls "${m_dlls} ${m_dll}")
        endforeach()
        message(STATUS "Run-time DLLs  :${m_dlls}")
    endif()
endif()
message(STATUS "Install prefix : ${CMAKE_INSTALL_PREFIX}")
if(WIN32)
    message(STATUS "Portable state : ${GBEX_PORTABLE_INSTALL}")
endif()
message(STATUS "DB encryption  : ${WXSQLITE3_HAVE_CODEC}")

message(STATUS "")
message(STATUS "Versions")
message(STATUS "--========--")
message(STATUS "${CMAKE_HOST_SYSTEM_NAME} ${CMAKE_HOST_SYSTEM_VERSION}")
if(LINUX_DISTRO_STRING)
    message(STATUS "${LINUX_DISTRO_STRING}")
    message(STATUS "${LINUX_DISTRO_DESCRIPTION}")
endif()
message(STATUS "CMake ${CMAKE_VERSION}")
message(STATUS "${CMAKE_MAKE_VERSION}")
if(CCACHE_PROGRAM)
    get_filename_component(CCACHE_TOOL "${CCACHE_PROGRAM}" NAME_WE)
    if(CCACHE_VERSION)
        message(STATUS "${CCACHE_TOOL} ${CCACHE_VERSION}")
    else()
        message(STATUS ${CCACHE_TOOL})
    endif()
endif()
if(VS_VERSION)
    message(STATUS "Visual Studio ${VS_VERSION}")
endif()
if(CMAKE_CXX_COMPILER_ID)
    message(STATUS "${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
endif()
if(CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION)
    message(STATUS "Win SDK ${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}")
endif()
if(wxWidgets_VERSION_STRING)
    message(STATUS "wxWidgets ${wxWidgets_VERSION_STRING}")
endif()
if(wxSQLite3_VERSION)
    message(STATUS "wxSQLite3 ${wxSQLite3_VERSION}")
endif()
if(RapidJSON_VERSION)
    message(STATUS "RapidJSON ${RapidJSON_VERSION}")
endif()
if(Lua_VERSION)
    message(STATUS "Lua ${Lua_VERSION}")
endif()
if(CURL_VERSION)
    message(STATUS "curl ${CURL_VERSION}")
endif()
message(STATUS "gettext ${GETTEXT_VERSION_STRING}")

message(STATUS "Répertoire Documentation GBEX: ${GBEX_DOC_DIR}")
message(STATUS "Répertoire Ressources GBEX: ${GBEX_RES_DIR}")


message(STATUS "")
message(STATUS "Variables CPACK")
message(STATUS "--========--")
get_cmake_property(_vars VARIABLES)
foreach(_var ${_vars})
    if(_var MATCHES "^CPACK_")
        message(STATUS "${_var} = ${${_var}}")
    endif()
endforeach()

message(STATUS "------------------ 8< -----------------")