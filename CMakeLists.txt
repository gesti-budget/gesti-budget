cmake_minimum_required (VERSION 3.30 FATAL_ERROR)


# ---------------------------------------------------------------------------
# cmake/
# â”œâ”€â”€ Version.cmake                 # Gestion des versions (NEWS, suffixe instable)
# â”œâ”€â”€ GitInfo.cmake                 # Extraction des infos Git (branche, commit, date)
# â”œâ”€â”€ VcpkgSetup.cmake              # DÃ©tection et intÃ©gration automatique de vcpkg
# â”œâ”€â”€ BuildHeader.cmake             # GÃ©nÃ©ration du build.h
# â”œâ”€â”€ LinuxDetection.cmake          # DÃ©tection OS/distro Linux
# â”œâ”€â”€ CompilerSetup.cmake           # Configuration du compilateur et des outils de cache
# â”œâ”€â”€ CacheTool.cmake               # Configuration du cache de compilation (ccache/clcache)
# â”œâ”€â”€ PlatformPaths.cmake	        # DÃ©finition des chemins de ressources selon la plateforme
# â”œâ”€â”€ GraphVizExport.cmake          # Options pour l'export Graphviz des dÃ©pendances
# â”œâ”€â”€ WxWidgetsSetup.cmake          # Configuration de wxWidgets (si nÃ©cessaire)
# â”œâ”€â”€ CurlSetup.cmake               # Configuration de la dÃ©pendance CURL/libcurl
# â”œâ”€â”€ BuildLayout.cmake             # Configuration des chemins de build et ressources
# â”œâ”€â”€ PackagingSetup.cmake          # Configuration de l'archivage et packaging
# â”œâ”€â”€ CPackSetup.cmake              # Configuration de CPack pour les paquets multiplateformes
# â””â”€â”€ install.cmake                # Installation des fichiers gÃ©nÃ©rÃ©s (build.h, etc.)
# === Chargement des modules CMake personnalisÃ©s ===
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake") 


# ðŸ”¢ Gestion de la version du projet (extrait de NEWS)
include(Version)

# ðŸ“¦ DÃ©tection de vcpkg et configuration du toolchain
include(VcpkgSetup)

# Activez Rechargement Ã  chaud pour les compilateurs MSVC si cela est pris en charge.
if (POLICY CMP0141)
  cmake_policy(SET CMP0141 NEW)
  set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT "$<IF:$<AND:$<C_COMPILER_ID:MSVC>,$<CXX_COMPILER_ID:MSVC>>,$<$<CONFIG:Debug,RelWithDebInfo>:EditAndContinue>,$<$<CONFIG:Debug,RelWithDebInfo>:ProgramDatabase>>")
endif()

project (GBEX VERSION ${GBEX_VERSION})

# Options de configuration du projet
option(GBEX_PORTABLE_INSTALL "Inclure un fichier gbexini.db3 vide dans l'installation Windows (mode portable)" OFF)
option(GBEX_ENCRYPTION_OPTIONAL "Compiler mÃªme si la bibliothÃ¨que wxsqlite ne prend pas en charge le chiffrement" OFF)

# Nom du fichier exÃ©cutable gÃ©nÃ©rÃ©
set(GBEX_EXE gbex)
# Ajoutez une source Ã  l'exÃ©cutable de ce projet.
add_executable (${GBEX_EXE} "gesti-budget.cpp" "gesti-budget.h")

if (CMAKE_VERSION VERSION_GREATER 3.12)
  set_property(TARGET ${GBEX_EXE} PROPERTY CXX_STANDARD 20)
endif()

# TODO: Ajoutez des tests et installez des cibles si nÃ©cessaire.


# ---------------------------------------------------------------------------
# Affiche les difÃ©rentes informations du projet
include(ShowVar)